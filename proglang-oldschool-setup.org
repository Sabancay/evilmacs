* IDE based on Tags
#+begin_src emacs-lisp
  ;; -*- coding: utf-8; lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp
  (use-package citre
  :defer t
  :init
  ;; This is needed in `:init' block for lazy load to work.
  (require 'citre-config)
  ;; Bind your frequently used commands.  Alternatively, you can define them
  ;; in `citre-mode-map' so you can only use them when `citre-mode' is enabled.
  (global-set-key (kbd "C-x c j") 'citre-jump)
  (global-set-key (kbd "C-x c J") 'citre-jump-back)
  (global-set-key (kbd "C-x c p") 'citre-ace-peek)
  (global-set-key (kbd "C-x c u") 'citre-update-this-tags-file)
  :config
  (setq
   ;; Set these if readtags/ctags is not in your PATH.
   ;;citre-readtags-program "/path/to/readtags"
   ;;citre-ctags-program "/path/to/ctags"
   ;;citre-gtags-program "/path/to/gtags"
   ;;citre-global-program "/path/to/global"
   ;; Set this if you use project management plugin like projectile.  It's
   ;; used for things like displaying paths relatively, see its docstring.
   ;;citre-project-root-function #'projectile-project-root
   ;; Set this if you want to always use one location to create a tags file.
   citre-default-create-tags-file-location 'global-cache
   ;; See the "Create tags file" section above to know these options
   citre-use-project-root-when-creating-tags t
   citre-prompt-language-for-ctags-command t
   ;; By default, when you open any file, and a tags file can be found for it,
   ;; `citre-mode' is automatically enabled.  If you only want this to work for
   ;; certain modes (like `prog-mode'), set it like this.
   citre-auto-enable-citre-mode-modes '(prog-mode)))
#+end_src

*** TCL/TK

#+begin_src emacs-lisp
  (use-package tcl
  :mode (("\\.tcl\\'" . tcl-mode)
         ("\\.tcons\\'" . tcl-mode)
         ("\\.svcf\\'" . tcl-mode)
         ("\\.exp\\'" . tcl-mode))
  :custom
    (tcl-application "tclsh")
    (tcl-indent-level 2)
  :bind
    (:map tcl-mode-map
     ("C-c b" . ve/tcl-eval-buffer)
     ("C-c l" . ve/tcl-eval-line))
    :init
    (defun ve/tcl-eval-buffer ()
      (interactive)
      (message "buffer")
      (tcl-eval-region (point-min) (point-max))
      )
    (defun ve/tcl-eval-line ()
      (interactive)
      (message "line")
      (tcl-eval-region (progn
             (beginning-of-line) (point))
           (progn
             (end-of-line) (point))
        )
      )
  :config
    (defun ve/tcl-mode-customization ()
      "My customization for `tcl-mode'."
      (electric-indent-mode -1))
    (add-hook 'tcl-mode-hook #'ve/tcl-mode-customization))

#+end_src

***** TODO Expect

***** TODO tree-sitter
check https://github.com/SKalt/tree-sitter-tcl

***** TODO Languageserver
there seems to be no ongoing project
